on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'version.txt'

name: Release

jobs:
  build:
    name: Release
    runs-on: ubuntu-latest
    steps:
        - name: Set up Go 1.16+
          uses: actions/setup-go@v2
          with:
            go-version: ^1.16
          id: go

        - name: Check out code into the Go module directory
          uses: actions/checkout@v2

        - name: Get version
          id: get_version
          run: echo ::set-output name=VERSION::$(cat version.txt)

        - name: Get commit hash
          id: get_commit_hash
          run: echo ::set-output name=COMMIT_HASH::$(git rev-parse --short HEAD)

        - name: Get tag name
          id: get_tag_name
          uses: haya14busa/action-cond@v1
          with:
            cond: ${{ github.ref == 'refs/heads/main' }}
            if_true: ${{ steps.get_version.outputs.VERSION }}
            if_false: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_commit_hash.outputs.COMMIT_HASH }}-dev

        - name: Build all binaries and zips
          run: make release
          env:
            AWS_DEFAULT_REGION: 'us-east-1'
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}

        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            tag_name: ${{ steps.get_tag_name.outputs.value }}
            release_name: Release ${{ steps.get_tag_name.outputs.value }}
            draft: false
            prerelease: ${{ github.ref != 'refs/heads/main' }}

        - name: Upload x64 Linux Release Binary
          id: upload-release-binary-linux-amd64
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./bin/linux-amd64/aardy
            asset_name: aardy-linux-amd64
            asset_content_type: application/octet-stream

        - name: Upload x64 Linux Release Asset
          id: upload-release-asset-linux-amd64
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./zips/aardy-linux-amd64.zip
            asset_name: aardy-linux-amd64-${{ steps.get_tag_name.outputs.value }}.zip
            asset_content_type: application/zip

        - name: Upload ARM-64 Linux Release Binary
          id: upload-release-binary-linux-arm64
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./bin/linux-arm64/aardy
            asset_name: aardy-linux-arm64
            asset_content_type: application/octet-stream

        - name: Upload ARM-64 Linux Release Asset
          id: upload-release-asset-linux-arm64
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./zips/aardy-linux-arm64.zip
            asset_name: aardy-linux-arm64-${{ steps.get_tag_name.outputs.value }}.zip
            asset_content_type: application/zip

        - name: Upload ARM-32 Linux Release Binary
          id: upload-release-binary-linux-arm
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./bin/linux-arm/aardy
            asset_name: aardy-linux-arm
            asset_content_type: application/octet-stream

        - name: Upload ARM-32 Linux Release Asset
          id: upload-release-asset-linux-arm
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./zips/aardy-linux-arm.zip
            asset_name: aardy-linux-arm-${{ steps.get_tag_name.outputs.value }}.zip
            asset_content_type: application/zip

        - name: Upload darwin Release Asset
          id: upload-release-asset-darwin
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_USER: ${{ secrets.GH_USER }}
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./aardy-darwin-amd64.zip
            asset_name: aardy-darwin-amd64-${{ steps.get_tag_name.outputs.value }}.zip
            asset_content_type: application/zip

        - name: Notify Slack
          uses: rtCamp/action-slack-notify@v2
          if: ${{ success() }}
          env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_CHANNEL: ops
            SLACK_USERNAME: ${{ github.repository }}
            SLACK_MESSAGE: "CLI release created :rocket:"

        - name: Notify Slack on failure
          uses: rtCamp/action-slack-notify@v2
          if: ${{ ! success() }}
          env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_CHANNEL: ops
            SLACK_USERNAME: ${{ github.repository }}
            SLACK_MESSAGE: "CLI release creation *FAILED* :fire:"